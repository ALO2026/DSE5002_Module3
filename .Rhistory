}
#cat is a print function I am using here, the \n is a linefeed character
# to advance to the next line in the printing
cat(" 'x' >= 10",x,"\n")
cat("Y is ",y ,"\n")
cat("Z is ",z)
y=0
z=0
x=10
if(x<10)
{
y=0.125*x
z=x^2
}else
{
y=0.25*x
z=x^(0.5)
}
#cat is a print function I am using here, the \n is a linefeed character
# to advance to the next line in the printing
cat("when 'x' >= 10",x,"\n")
cat("Y is ",y ,"\n")
cat("Z is ",z)
x=18
print("change == to !=1")
print(" %% will equal always equal remainder 1 when diveded by 2 and odd")
print(" can also change to %/% where remainder is always 0 if even, but %% is easiest to use for less complex statement")
if(x<0)
{
cat("Negative X value\n")
}else
{if(x%%2!=1)
{
cat("X is even\n")
}
else
{
cat("X is odd\n")
}
}
people_in_line=3
scones_in_stock=FALSE
if((people_in_line <= 2)|(people_in_line <= 4 && scones_in_stock))
{
cat("I'll stop by Starbucks\n")
}else
{
cat("I won't stop by Starbucks\n")
}
x=9
y=ifelse(x<10,0.125*x,0.25*x)
cat("verifies 1st condition! y=",y,"\n")
x=y*10
z=ifelse(x<10,0.125*x,0.25*x)
cat("verifies 2nd condition! z=",z)
knitr::opts_chunk$set(echo = TRUE)
for(i in 1:10)
{
cat(i," ",i^2,"\n")
}
knitr::opts_chunk$set(echo = TRUE)
x=1:10
y=data.frame(x=x,xsq=x^2)
y
my_list=list("a","b",3,"c")
for(i in my_list)
{
cat(i,"\n")
}
my_list=list("a","b",3,"c")
for(i in my_list)
{
if(is.character(i))
{
cat(i,"\n")
}
}
for(i in seq(from=0,to=15,by=5))
{
for(j in 1:3)
{
cat(j+i, "\n")
}
}
letters[1:10]
LETTERS[21:26]
# nested for loop (bad bad bad
# --> need to using hashing to eliminate complexity)
x4 <- character()                                          # Create empty data object
loop_work <- 0                                             # loopwork tracks how many steps
for(i in 1:5) {                                            # Head of first for-loop
for(j in 1:5) {                                          # Head of nested for-loop
loop_work <- loop_work + 1
x4 <- c(x4, paste(LETTERS[i], letters[j], sep = "_"))  # Code block
}
}
print(x4)
print(loop_work)
require('hash')
h<-hash('a'=1,'b'=2,'c'=3)
h['a']
require(hash)
h <- hash()
x5 <- c()
hash_work <- 0
for(i in 1:5){
hash_work <- hash_work + 1          # count the number of assignments
h[LETTERS[i]] <- letters[1:5]       # set letters 1-5 to be the hash contents
# at the key locations of each value in
# the first five values in Letters
}
#What is in H right now?
cat("After the first loop, h has ")
print(h)
# how many operation used so far
cat("So far, there are ",hash_work," operations carried out\n")
print("What are the names of the hash items")
names(h)
#looking at this, each entry in the hash has the five lowercase letters
#we can now go though the hash, and paste the lowercase letters onto the
# name of the hash items
for(j in 1:length(h)){
hash_work <- hash_work + 1
x5 <- c(x5,paste(names(h)[j],h[[LETTERS[j]]],sep='_'))
}
print(hash_work)
print(loop_work)
# note we could have used the keys of the hash, rather than the names
# using the keys() makes more sense to me
#  x5 <- c(x5,paste(keys(h)[j],h[[LETTERS[j]]],sep='_'))
# the paste command is being used to add the contents of the hash at the key
#key value to the key value itself.   Since each key value has only one value,
# the paste function recycles the contents of names(h)[j] or keys(h)[j]
require(tictoc)
tic()
# nested for loop (bad bad bad
# --> need to using hashing to eliminate complexity)
x4 <- character()                                          # Create empty data object
loop_work <- 0                                             # loopwork tracks how many steps
for(i in 1:5) {                                            # Head of first for-loop
for(j in 1:26) {                                          # Head of nested for-loop
loop_work <- loop_work + 1
x4 <- c(x4, paste(LETTERS[i], letters[j], sep = "_"))  # Code block
}
}
toc()
tic()
h <- hash()
x5 <- c()
hash_work <- 0
for(i in 1:5){
hash_work <- hash_work + 1          # count the number of assignments
h[LETTERS[i]] <- letters[1:5]       # set letters 1-5 to be the hash contents
# at the key locations of each value in
# the first five values in Letters
}
for(j in 1:length(h)){
hash_work <- hash_work + 1
x5 <- c(x5,paste(names(h)[j],h[[LETTERS[j]]],sep='_'))
}
toc()
x=0
y=0
while(y<=3.3)
{
cat(x," ",y,"\n")
x=x+1
y=x^(1/3)
}
#use floor of 3.3^3 to find the largest integer with a cube root of less than
# 3.3
xmax=floor(3.3^3)
x=0:xmax
data.frame(x=x,y=x^(1/3))
word_list=c("always","apple","appeared","apple","apple","apple","anxious","always","appeared","and","all")
h=0
rm(h)
h<-hash()
for(word in word_list)        # loop through all the entries in the list
{
if(!has.key(word,h))       # see if a word is in use as a key
{
h[[word]]<-1              # this is the first time we have seen it,
}else
{
h[[word]]<-h[[word]]+1    # we have seen it before, increase the count
# by one for this word
}
}
h
knitr::opts_chunk$set(echo = TRUE)
x2power<-function(x,n)
{
# this is the function x2Power, that raises an input value x to the input
# power n
# written by HD Sheets, 6/24/2024 for DSE5002
y=x^n
return(y)
}
knitr::opts_chunk$set(echo = TRUE)
x2power<-function(x,n)
{
# this is the function x2Power, that raises an input value x to the input
# power n
# written by HD Sheets, 6/24/2024 for DSE5002
y=x^n
return(y)
}
x2power<-function(x,n)
{
# this is the function x2Power, that raises an input value x to the input
# power n
# written by HD Sheets, 6/24/2024 for DSE5002
y=x^n
return(y)
}
x2power
x2power<-function(x,n)
{
# this is the function x2Power, that raises an input value x to the input
# power n
# written by HD Sheets, 6/24/2024 for DSE5002
y=x^n
return(y)
}
y
x2power<-function(x,n)
{
# this is the function x2Power, that raises an input value x to the input
# power n
# written by HD Sheets, 6/24/2024 for DSE5002
y=x^n
return(y)
}
cat(y)
x2power<-function(x,n)
{
# this is the function x2Power, that raises an input value x to the input
# power n
# written by HD Sheets, 6/24/2024 for DSE5002
y=x^n
return(y)
}
y
x2power<-function(x,n)
{
# this is the function x2Power, that raises an input value x to the input
# power n
# written by HD Sheets, 6/24/2024 for DSE5002
y=x^n
return(y)
}
x2power(3,2)
cmpdiv<-function(a,b,c)
{
# this is the function cmpdiv, that divides compound addition variables
y=(a+b)/c
return(y)
}
cmpdiv(2,4,3)
x2power<-function(x,n=2)
{
# this is the function x2Power, that raises an input value x to the input
# power n
# written by HD Sheets, 6/24/2024 for DSE5002
# updated on 6/24/2024 to include a default value on n of 2
y=x^n
return(y)
}
x2power(4)
x2power<-function(x,n=2)
{
# this is the function x2Power, that raises an input value x to the input
# power n
# written by HD Sheets, 6/24/2024 for DSE5002
# updated on 6/24/2024 to include a default value on n of 2, HDS
# further updated on 6/24/2024 to include some error trapping
if(!is.numeric(x))
{
cat("Please enter only numeric values of x \n")
return(NULL)
}
if(!is.numeric(n))
{
cat("Please enter only numeric values of n \n")
return(NULL)
}
if(length(n)>1)
{
cat("Please enter a scalar value for n \n")
return(NULL)
}
y=x^n
return(y)
}
x2power(4)
x2power("bob","37")
x2power(1:5,4:7)
cmpdiv<-function(a,b,c)
{
# this is the function cmpdiv, that divides compound addition variables
if(!is.numeric(a))
{
cat("Please enter only numeric values of a \n")
return(NULL)
}
if(!is.numeric(b))
{
cat("Please enter only numeric values of b \n")
return(NULL)
}
if(!is.numeric(c==0))
{
cat("Please enter only numeric values greater than or less than 0 for c \n")
return(NULL)
}
y=(a+b)/c
return(y)
}
cmpdiv(2,4,3)
cmpdiv<-function(a,b,c)
{
# this is the function cmpdiv, that divides compound addition variables
if(!is.numeric(a))
{
cat("Please enter only numeric values of a \n")
return(NULL)
}
if(!is.numeric(b))
{
cat("Please enter only numeric values of b \n")
return(NULL)
}
if(!is.numeric(c=0))
{
cat("Please enter only numeric values greater than or less than 0 for c \n")
return(NULL)
}
y=(a+b)/c
return(y)
}
cmpdiv(2,4,3)
cmpdiv<-function(a,b,c)
{
# this is the function cmpdiv, that divides compound addition variables
if(!is.numeric(a))
{
cat("Please enter only numeric values of a \n")
return(NULL)
}
if(!is.numeric(b))
{
cat("Please enter only numeric values of b \n")
return(NULL)
}
if(!is.numeric(c)==0)
{
cat("Please enter only numeric values greater than or less than 0 for c \n")
return(NULL)
}
y=(a+b)/c
return(y)
}
cmpdiv(2,4,3)
cmpdiv<-function(a,b,c)
{
# this is the function cmpdiv, that divides compound addition variables
if(!is.numeric(a))
{
cat("Please enter only numeric values of a \n")
return(NULL)
}
if(!is.numeric(b))
{
cat("Please enter only numeric values of b \n")
return(NULL)
}
if(c==0)
{
cat("Please enter only numeric values greater than or less than 0 for c \n")
return(NULL)
}
y=(a+b)/c
return(y)
}
cmpdiv(2,4,3)
cmpdiv<-function(a,b,c)
{
# this is the function cmpdiv, that divides compound addition variables
if(!is.numeric(a))
{
cat("Please enter only numeric values of a \n")
return(NULL)
}
if(!is.numeric(b))
{
cat("Please enter only numeric values of b \n")
return(NULL)
}
if(c==0)
{
cat("Please enter only numeric values greater than or less than 0 for c \n")
return(NULL)
}
y=(a+b)/c
return(y)
}
cmpdiv(2,4,0)
critical_KPI<-function(x,y,z)
{
#example of returning two variables from a function, HDS 6/24/2024
kpi_one=x/y
kpi_two=(x^2+z)/sqrt(y)
my_output_list=data.frame(kpi1=kpi_one,kpi2=kpi_two)
return(my_output_list)
}
my_res=critical_KPI(2,3,4)
my_res$kpi1
my_res$kpi2
a=5
my_function_a<-function(x)
{
#demonstration of variable scope, part a
# HDS, 6/24/2024
# define a local varialbe a that is only used in the function
a=2
y=a*x
return(y)
}
#let's check the value of a
print(a)
# now run the function
z=my_function_a(5)
print(z)
# did the variable a in the workspace change?
print(a)
b=2
my_function_b<-function(x)
{
y=x^b
}
print(b)
z=my_function_b(6)
print(z)
print(b)
c=2
my_function_c<-function(x)                  #outer function
{
c=3
my_inner_function<-function(x)           #defined within my_function_c
{
y=c*x
return(y)
}
youter=my_inner_function(x)
return(youter)
}
print(c)                                      # c value in the workspace
z=my_function_c(6)                            # inner function uses value defined
# in my_function_c
print(z)
print(c)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(babynames)
library(stringr)
str_view(fruit,"berry")
str_view(fruit,"apple")
str_view(fruit,"star")
str_view(c("a","ab","a:b","ed"," a b","eab"),"a.")
str_view(fruit,"a...e")
str_view("Go, no Stop.Don't Stop","\\.")
str_view(fruit,"ba?")
str_view(fruit,"[abcde]{2,4}")
str_view(fruit,"(aa|ee|ii|oo|uu)")
str_detect(fruit,"\\b[aA]\\W*")
fruit[str_detect(fruit,"\\b[aA]\\W*")]
fruit[str_detect(fruit,"^(a|A)")]
x <- c("apple", "pear", "banana")
str_replace_all(x, "[aeiou]", "*")
df <- tribble(
~str,
"<Sheryl>-F_34",
"<Kisha>-F_45",
"<Brandon>-N_33",
"<Sharon>-F_38",
"<Penny>-F_58",
"<Justin>-M_41",
"<Patricia>-F_84",
)
df
separate_wider_regex(df,
str,
patterns=c(
"<",
name = "[[:alpha:]]+",
">-",
gender = ".",
"_",
age = "[[:digit:]]+"
)
)
df2=data.frame(str=c(
"Smith,Bob",
"Jones, Sar",
"Kim, Amanda")
)
separate_wider_delim(df2,
str,
delim=",",
names=c("last","first")
)
